Procedural Programming(순차적 프로그래밍)
    Procedure = function

    단점
        호출 스택
        동일한 자료구조 타입을 매개변수로 넘겨줘야 합니다.
        -> 자료구조와 함수가 분리되어 있어서

        struct Stack
        {
            int value;
            Element* pTop;
        };

        void Push(Stack& stack);

Object Oriented Programming (OOP : 객체 지향 프로그래밍)
    -> 자료구조와 함수를 통합
        class Stack
        {
            int value;
            Element* pTop;

            void Push();
        };

Object Oriented Programming
    Object(객체)
    현실 세계의 대상 하나 하나를 객체
        상태(State)
            
        행동(Behaviour)
            
    현실 세계의 오브젝트를 프로그래밍

    Class 와 Instnace
        Class : Object를 상태와 행동으로 만든 추상적인 개념 - 타입
                    상태          행동
            C++     멤버변수        멤버함수
            C#      필드            메서드
            Java    필드            메서드
        Instance : 추상적인 Class를 구체화 시킨 것 - 이름을 붙인 변수
---------------------------------------------------

OOP 5 가지 특징

1. Object
2. Class

3. Encapsulation(캡슐화)
4. Inheritance(상속)
5. Polymorphism(다형성)


캡슐화
    가챠 캡슐 - 내용물을 숨기는 것
    알약 캡슐 - 복용이 쉽다

    정보를 숨김 (Information Hiding)
        사용법을 쉽게

상속
    Inheritance (상속)          Derivation(파생)
    Parent Class (부모 클래스)  Base Class(기반 클래스)
    Child Class (자식 클래스)   Derived Class(파생 클래스)

다형성
    상황에 따라 서로 다른 형태로 해석할 수 있다
    상속과 관련


----------------------------------------------------

class <이름> [: 부모]
{
[접근제한자]
    <멤버>
    .
    .
    .
};

Access Modifier(접근 제한자)
    public
        공개
        클래스 내부(멤버함수)/외부(인스턴스)에서 모두 사용이 가능
    private
        비공개
        클래스 내부(멤버함수)에서만 접근이 가능하고 외부(인스턴스)에서는 불가능

    protected

클래스와 인스턴스

struct Galaxy
{
    int color;
};

int GetColor(Galaxy phone)
{
    return phone.color;
}

Galaxy phone;
GetColor(phone);

class Galaxy
{
public:
    int color;

    int GetColor()
    {
        return color;
    }
};

Galaxy phone1;
phone1.GetColor();

// 암시적 오브젝트(Implicit Object)
// Galaxy* this

컴퓨터 클래스를 만들어 봅시다.

    - 공개 
        가격 - 정수
        색상 - 정수
    - 숨김
        파워 - 정수
        메인보드 - 문자열

    
    - 숨김
        파워표시();
    - 공개
        가격표시();


----------------------------------

클래스의 멤버함수 정의

return-type <class-name>::<member-function>(parameters...)
{

}

::
scope resolution operator

header file
    클래스 선언

cpp file
    클래스 정의(멤버함수)


Class Coding Rule

클래스이름 : 첫글자 대문자 나머지 소문자(PASCAL)
    class Player
    class Bullet
    class DarkElf

멤버변수 : 멤버 m 구문자를 소문자로 명시하고 (Camel)
    int mHealth;
    int mWeight;
    int mHorsePower;

멤버함수 : 첫글자 대문자 나머지 소문자(PASCAL)
    Attack();
    Jump();
    IsDead();

C++ 에서는 구조체는 모든 멤버 변수가 public인 클래스와 동일
    구조체 : 멤버 변수들만 존재
    클래스 : 멤버 변수 + 멤버 함수

캡슐화(Capsulation)
    정보은닉(Information Hiding)
        보안
        사용성

    다른 클래스, 구조체와 같은 타입정보들도 캡슐화

    보안
        

        class Dog
        {
            enum Color
         {
            WHITE = 0xFFFFFF,
            BLACK = 0x101010
         }
            
            Color color;

        };

        class Cat
        {
            enum Color
        {
            WHITE = 0xF0F0F0,
            BLACK = 0x000000
        }

        };

        Dog jhon;
        jhon.color = WHITE;

        Cat nabi;
        nabi.color = BLACK;

Tip) 클래스 선언 정리

    1. 멤버 변수 / 멤버 함수를 구분해서
    class MyClass
    {
    private:
        int x;
    public:
        int y;

    private:
        void f();
    public:
        void g();

    };

    2. 접근 권한으로 구분
    class MyClass
    {
    Private:
        int x;
        void f();

    public:
        int y;
        void g();
    }
    

struct MyStruct
{
    int x;
    int y;
};

class MyClass
{
public:
    int x;
    int y;
};

MyStruct s1;
s1.x =1;

MyClass c1;
c1.x = 1;

Class Computer
{
    int mPrice;
    int mColor;
    int mPower;

public:
    void PrintPower();
    void PrintPrice();
};

Computer my;

my.PrintPower();



const

    constant member function
        this

    상수 변수 - 값을 수정할 수 없음

OOP
    상태 / 행동


    Getter / Setter -> 속성(Property)
        멤버 변수를 숨기고, 접근을 멤버 함수로 수행
            - 내부 값은 숨기고 함수만 노출 안전한 코딩
            - 예외 처리도 가능
            - 가공이 가능


상수 변수
const int LENGTH{10};

상수 매개변수
void Print(const int* x);
{

}

상수 반환값
const int* DoSomething()
{

}

상수 멤버 함수
class MyClass
{
    int GetCount() const;
}

--------------------------------------

int x{1}, y{2};

const int* const p1 = &x;

*p1 = 1;
p1 = &y;

생성자(Constructor) & 소멸자(Destructor)

int myInteger;
myInteger = 1;

// uniform initialization
int myInteger{1};

class MyClass
{

};

생성자
    객체가 인스턴스화될 때 자동적으로 호출되는 특별한 멤버 함수

        - 클래스와 동일한 이름(대소문자 일치)
        - 반환 타입이 없음(void도 없어요)

        MyClass()
        MyClass(int, int)

소멸자
    인스턴스가 소멸될 때 자동적으로 호출되는 특별한 멤버 함수

        - 클래스와 동일한 이름(대소문자 일치)
        - 반환 타입이 없음(void도 없어요)
        - 매개변수도 없음
        - 클래스 이름 앞에 접두어 ~(물결표, tilde)가 붙음

        ~MyClass();

생성자와 소멸자를 만들었느냐

    - 멤버 변수 초기화
    - 기본 작업


기본 생성자(Default Constructor)
    매개변수가 없는 생성자

    Implicit Default Constructor
        생성자를 제공하지 않으면 자동으로 만들어지는 (아무것도 안함)

생성 오버로딩

멤버 초기화 리스트(member initializer list)

    <constructor> : <member-init1>, <member-init2> ...
    {
        [body]
    }






왜 기본생성자가 있느냐!
    POD(Plain Old Data) - C언어 스타일의 데이터 int float double struct {}
        다른 메모리로 혹은 다른 대상(HDD, Network, Graphic...)으로 복사가 쉬움

    그럼 복잡한 데이터 -> C++의 클래스
        암시적 기본생성자가 존재하면 POD
            - 다른 생성자가 없음

    class MyClass
    {
        int* p;

        MyClass()
        {
            p = new int[10000];

            p = (int*)(new Myclass);
        }
    }


컴파일러 이론


int* p1 = new int;
int* p2 = new int;

delete p2;
delete p1;

-------------------------------------------

대리 생성자(Delegate Constructor)

    <constructor> : <other-constructor>
    {

    }

    : 표기를 사용하므로 대리생성자, 멤버 초기화 리스트 중 하나만 사용 가능함


소멸자(Destructor)

    메모리를 해제


class <이름>
{
[접근제한자]:
    [멤버]
    .
    .
};

접근제한자
    - private
    - public

class MyClass
{
public:
    int x;
public:
    void Function();
};

void MyClass::Function()
{
    
}

MyClass c1;
c1.x;
c1.Function();

---------------------------------------------

const Instnace

---

static member variable (class variable)

static member variable (class function)

---

friend
    클래스나 함수에 붙여서 친구를 지정
        - 친구는 나의 모든 멤버(private 포함)을 열람할 수 있음
            - 내가(정보를 오픈할 쪽) 너를 친구로 지정하는 것만 가능
            - 쌍방이 아님. A가 B를 친구로 지정해도 A는 B의 친구가 아님
            - 친구의 친구는 친구가 아님

    friend class
    friend function
        - friend global function
        - friend member function

캡슐화를 무시하면서 까지 friend 가 필요하냐

****연산자 오버로딩(operator overloading)****

- 연산자 = 함수

    a. 피연산자가 기본 타입이면 기본 연산
    b. 피연산자가 클래스와 같은 사용자 정의 타입이면
        - 연산자 오버로딩
        - 기본 타입으로 시도

    전역 함수 버전의 연산자 오버로딩
    멤버 함수 버전의 연산자 오버로딩
        피연산자 중 하나가 this

+(Student a, Student b)
{
    a.score + b.score;
}

Student doggy, kitty;

doggy + kitty;

void f();
void f(int x);

op1 > op2

bool > (int x, int y)
{
    return x > y;
}

bool > (Student x, Student y)
{
    return x.GetScore() > y.GetScore();
}

class Student
{
    int mScore;
public:
    int GetScore();
}

if( s1 > s2 )
{

}

-------------------

r-value

익명객체(anonymous object)

void PrintValue(const int& x)
{
    std::cout << x << std::endl;
}

int main()
{
    int x { 10 };

    PrintValue(x);

    Printvalue(30);

    PrintValue( x + x );
}

    std::cout << x + x << std::endl;
    y = a + b;

class int
{
    int();
    int(int x);
}

int Square(int x)
{
    // return x * x;
    int temp = x*x;
    return temp;
}

int main()
{
    int x{2};
    std::cout << Square(x) <<std::endl;
}

---------------------

int + ( op1, op2 )

class
{
    + (op2)
    {
        this + op2;
    }
}

c1.+(c2);
----------------------------
private :
    클래스 내부에서 접근 가능 / 외부에서 접근 불가능

    C++ 캡슐화 : 객체 단위가 아니라 클래스 단위

++x; // 증가 후 대입
x++; // 대입 후 증가

Point2D pt{3,1};

pt.mX = pt.mX + 1;
pt.mY = pt.mY + 1;

pt = pt + Point2D(1,1);

++pt;

-----------------------------

int numbers[10];


numbers[0] = 1;

[] ( numbers, 0 )

type casting

명시적 형변환

int myInteger = 1;
float myFloat = operator int (myInteger);

() - Function Call Operator

    Functor = Function + Object 함수 객체

Stream Operator
    Point2D pt;
    std::cout << pt;

    멤버 함수 X (std::cout 클래스 꺼)
    전역함수만 가능

< Operator Overloading >

MS Rule
    1. 멤버 함수
    2. 전역 함수
        (좌측 피연산자가 우리 클래스가 아닌 경우)
        std::cout << 1;

        a. Getter / Setter
        b. friend
            
--------------------------------------------

std::cout << a << b << c << std::endl;

// 컴퓨팅사고력 주인공
class Player
{
    Player& MoveForward();
    Player& TurnLeft();
    Player& TurnRight();
};

Player hero;
hero.MoveForward();
hero.MoveForward();
hero.TurnLeft();
hero.MoveForward();

hero.MoveForward()
    .MoveForward()
    .TurnLeft()
    .MoveForward();

---------------------------------------------------

복사(copy)

int x = 5; // 복사(대입) 초기화
int x(5);  // 직접 초기화
int x{5};  // 유니폼 초기화

class MyClass
{
private:
    int mValue;

public:
    MyClass(int x) : mValue (x)
    {

    }

};

MyClass x = 5;
Myclass x(5);
MyClass x{5};

Complexity

class MyClass
{
    int x;
    int y[1000];
    int* p;

    void f()
    {
        p = new int[10000];
    }
}

복사 생성자
    <class_name> (const <class_name>& )

MyClass x;

MyClass y(x);

class MyClass
{
public:
    MyClass(const MyClass& target) // 복사 생성자
    {

    }
}

Shallow Copy vs Deep Copy

class Dog
{

};

class DogHouse
{
    Dog* pOwner;

    DogHouse(const DogHouse& from)
    {
        // shallow copy
        // pOwner = from.pOwner;

        pOwner = new Dog(*from.pOwner);
    }
};

Dog happy;

DogHouse home(happy);
DogHouse home2(home);


-------------------------------------------

OOP

1. 클래스
2. 오브젝트(인스턴스)

3. Encapsulation

4. 상속
5. 다형성

응용법

STL : Standard Template Library

Modern C++

------------------------------------------

Relationship

박만수
    나이
    성별
    키

    코딩
    강의

취업반 8기
게임캔버스
북평고등학교
동해시 향우회

is-part-of : Composition

has-a : Aggregation

use-a : Asscociation

is-a : Generalization / Specialization


is-part-of 
    멤버 변수

    엔진 is-part-of 차

    엔진은 차의 구성요소 중 하나
        - 멤버 변수 중의 하나
    엔진은 한번에 하나의 차량에만 탑재
        - Car 인스턴스에 각각 Engine이 존재
    엔진은 차에 의해 관리
        - Car 인스턴스가 생성될때, 소멸될 때 각각 Engine 따라가죠
    엔진은 차량이 뭔지 모름
        - Engine에서는 Car에 접근할 수단이 없음

    class Engine
    {
        int mHorsePower;
        int mTorque;
        int mZero100;
    };

    class car
    {
        Engine mEngine;

    };


has-a
    포인터 멤버 변수

    차 has-a 타이어

        타이어는 차의 일부 요소
        타이어는 한번에 여러 자동차에서 소유할 수 있음
        타이어는 차량에 의해 관리 되지 않음
        타이어는 차량을 모름

    class Tire
    {
        int mWheelSize;
    };

    class Car
    {
        Tire* mpTire;
    }

    Tire t1 = new Tire;
    Car car1;
    car1.mpTire = t1;
    //////

    delete t1;

use-a

    멤버 포인터 변수 -> 함수 매개변수 포인터

    운전자 use-a 차

    차는 운전자와 관련이 없음
    차는 여러 운전자가 사용가능
    차는 운저자에 의해 관리 될 수도 아닐 수도
    차는 운전자를 모를, 알수도

    class Driver
    {

    };

    class Car
    {
        //Driver* pDriver;

        void DriveBy(Driver* pDriver);
    };

is-a

------------------------------------------------

상속(파생) Inheritance/Derivation

Derivation              Inheritance
Base Class              Parent Class        Super Class
Derived Class           Child Class         Sub Class


C++ 문법
    class <child-class> : [virtual] [access-modifier] <parent-class>, ...
    {

    }

    class Cat : public Animal
    {

    };


Parent          public상속          protected상속       private상속
public          public              protected           private
protected       protected           protected           private
private         접근불가            접근불가             접근불가

숲을 보고 나무를 본다 ( Topdown 방식 )

나무를 보고 숲을 본다 ( BottomUp 방식 )