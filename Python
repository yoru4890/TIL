Python for C++ programmer

- high-level, general-purpose language
- interpreter language
- dynamically typed
- grabage-collected
- built-in libraries

느리다. 하지만 개발속도는 빠르다

Phthonic



기초문법

이름규칙

- 변수는 글자 혹은 _로 시작해야함
- 글자는 A-z, 0-9, _ 만 사용 가능합니다.
- 대소문자 구분

함수 : function, my_function
변수 : variable, my_variable
Class : Bug, MyClass
상수 : CONSTANT, MY_CONSTANT
모듈 : module.py my_module.py

특수한 표기
_internal_variable : proteted 멤버
__properties : private 멤버
special_case_ : keyword 중복을 피하기 위해
__magic_word__ : duner(double underscore), 생성자, 빌트인 함수


코드블럭
indent

x = 0
if x > 0:
    print("x는 0보다 큽니다")


Entry Point 없습니다.
End of line 없습니다.

주석
# 한줄 주석입니다.

x = 1 # 변수 x에 1을 대입합니다.

'''
여러줄 주석입니다.
'''

"""
여러줄 주석입니다.
여러줄 주석입니다.
"""

(사실은 문자열 리터럴이다.)

변수
- 선언이 필요 없습니다. 동적 타입

x = 0
y = "hello"
z = 3.14

x,y,z = 0, "hello", 3.14

x=0, y="hello", z= 3.14   (잘못되었다)

리터럴

정수 - int - 11, 0xffffffff
실수 - float - 3.14 (double 정밀도), 1.0e+8
복소수 - complex - 1.1 + 2.2j

논리 - bool - True, False
문자열 - str - "print"
                char 타입 X
                null-terminated X
                " ... "
                ' ... '

None - None - nullptr 같은 개념

import sys

print(sys.maxsize)

print("Hello World")
print('Hello World')

print('"Hello World"')
print("you aren't my friend")

print(""" '" """)

print(r"c:\test\test")

# 파이썬은 전부 오브젝트다

print(type(1))
print(type(3.14))
print(type("Hello"))
print(type(1.1+2.2j))
print(type(True))
print(type(None))

print("---------------------")

print(int())
print(float())
print(str())


x = 10
y = "cat"

y = x
y = y + 1

print(x)
print(y)

print(f"id: {id(x)} - value: {x}")
print(f"id: {id(y)} - value: {y}")


연산자

산술연산자
+ - * / %

비교연산자

논리연산자

# 연산자
print(1+1)
print(3-2)
print(5*2)
print(6/3)
print(6%3)

print(6//3)
print(2**3)


x = 5
print( 2 < x <= 10)

print(True and False)
print(True or False)
print(not True)

x = y = 1

x, y = 1, 2

x, y = y, x

x += 1
y -= 2
x **= 2

#++x, x++ 존재하지않는다

시퀀스 타입(Sequence Type)

list

set

dict

#list
jobs = ["warrior", "archer", "thief"]

print(jobs[0])
print(jobs[1])

jobs.append("mage")
del jobs[0]

mixed = [1, "둘", 3 , "Four"]

print(mixed)

array2d = [[1,2,3],[4,5,6],[7,8,9]]
print(array2d)

dynamic_list = [[1],[1,2,3],[1,2,3,4,5]]
print(dynamic_list)

print(mixed[-1])
print([1,2,3] + [4,5,6])
print([1,2,3] * 3)

print(3 in [1,2,3])

# slice
# [start:end:step]
my_list = [1,2,3,4,5]

print(my_list[1:3])
print(my_list[2:])
print(my_list[0:4:2])
print(my_list[::-1])

# str

my_string = "hello world"

print("h" in my_string)
print(my_string[::-1])
print("hello"[0:3])

#format

job = "programmer"
age = 20
name = "John"

print("I am " + job + ".")
print(f"I am {job}, and age is {age}. I am {name}.")

print("🚗")

# tuple - immutable list

x = (1,2)

print(x)

# x[0] = 3 불가능

# set

set1 = {1,2,3,4,5}
set1.add(6)

# set1[1] = 0 불가능

set2 = {2,4,6,8,10}

print(set1 | set2)
print(set1 & set2)
print(set1 - set2)

print( set1 < set2 )

# dict

developers = {"name" : "Jone", "age" : 30, "country" : "USA", "skills" : ["Java", "C#", "Python"]}

print(developers["name"])

print(developers)

# C++ vs Python
# statement

# if
x = 1
if x > 1:
    print("x > 1")
elif x < 1:
    print("x < 1")
else:
    print("x = 1")

if 1 <= x <= 10:
    print("1 <= x <= 10")


# and, or, not
lane = "bot"
role = "carry"

if lane == "bot" and role == "carry":
    print("원딜이시군요")


# match
operator = "+"

match operator:
    case "+":
        print("Addition")
    case "-":
        print("Subtraction")
    case "and" | "or" | "not":
        print("Logical")
    case _:
        print("Invalid operator")


# while

i = 0
while i < 5:
    print(i)
    i += 1

# for
# C++의 range-based for

champions = ['Lux', 'Ahri', 'Ezreal']
for champion in champions :
    print(champion)

champions = { "name" : "Lux", "type" : "magician"}

for element in champions:
    print(element)

for key, value in champions.items():
    print(key + " : " + value)

for item in champions.items():
    print(item)

for i in range(start, end, step):
    print(i)

# list comprehension
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    if number > 3:
        print(number)

comp = [number*10 for number in numbers if number > 3]
print(comp)

# function

def square(x):
    return x ** 2

def test():
    pass

def test2():
    ...

print(square(5))

def return_many():
    return 1,2,3

print(return_many())

print(type(...))

def create_champion(name, lane="mid"):
    print("Creating" + name + "in" + lane)

create_champion("ahri")

# keyword arguments
create_champion(name="aatrox", lane="top")
create_champion( lane="top",name="aatrox")

f = create_champion

f("Lux", "Mid")

def rotation_champs(func)
    func("Ahri")
    func("Lux")
    func("Zed")

rotation_champs(create_champion)

if 1 == 1:
    if 2 == 2:
        print(2)

for i in range(1,10):
    for j in range(1,10):

def func_1():
    def func_2():
        print("func_2")

    print("func_1")

func_1()
# func_2() 사용X func_1 안에 있다

# arbitrary arguments

def f(v):
    print(v)

# f(1,2) 불가
f((1,2))

f({"x":1, "y":2})

def f1(*args):
    for arg in args:
        print(arg)

f1(1,2,3,4)

def f2(**kwargs):
    for key, value in kwargs.items():
        print(key, value)

f2(a=1, b=2, c=3)

# function overloading (필요없다)

def func(*args):
    pass


# Object Oriented Programming

class Champion:
    # double underscore - dunder - special methods

    # special method
    def __init__(self, name, hp):
        self.name = name        # attribute
        self.hp = hp
        print("Champion created")

    # method
    def move(self):
        print(f"{self.name} moves")

# ahri = Champion()
print(ahri)
print(type(ahri))
print(isinstance(ahri, Champion))
print(isinstance(ahri, object))

struct = { "x": 1, "y": 2}

ahri = Champion("ahri", 100)
print(f"name:{ahri.name}, hp:{ahri.hp}")

ahri.mp = 100
print(ahri.mp)

ahri.move()

class Point2D:
    def __init__(self, x,y):
        self.x = x
        self.y = y

    def __str__(self):
        return f"({self.x},{self.y})"

    def __add__(self, other):
        return Point2D(self.x + other.x, self.y + other.y)

pt1 = Point2D(10,20)
print(pt1)
pt2 = Point2D(30,40)
print(pt1 + pt2)

# public protected private

# public non-public


class Golum:
    def __init__(self):
        pass

    @property # decorator
    def my_precious(self):
        print("getter")
        return self.__my_precious

    @my_precious.setter
    def my_precious(self, value):
        print("setter")
        self.__my_precious = value

g = Golum()
# print(g.__my_precious)
# name mangling
priunt(g._Golum__my_precious)

#FMyFunction
#GVx

g.my_precious = "The Ring"

print(g.my_precious)

attribute - 멤버 변수
property - 캡슐화된 멤버 변수와 게터/세터

# inheritance
class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        print("Animal Created")

    def sound(self):
        print("Animal Sound #!@~!@#")

class Cat(Animal):
    def __init__(self, name, age):
        #super().__init__(name,age)
        self.name = name
        self.age = age
        print("Cat Created")

        def sound(self):
            print("Meow")

instance = Animal("kitty", 3)
instance.sound()

instance = Cat("kitty", 3)
instance.sound()
print(instance.name + " " + str(instance.age))

# polymorphism
class Animal:
    def sound(self):
        print("Animal Sound")

class Cat(Animal):
    def sound(self):
        print("Meow")

class Dog(Animal):
    def sound(self):
        print("Bark")

animal = Animal()
cat = Cat()

print(isinstance(cat, Animal))


animals = [Cat(), Dog(), Cat(), Cat(), Dog()]
for animal in animals:
    animal.sound()

x = Cat()
y = Dog()

x, y = y, x

x.sound()
y.sound()

# static variable
# static method vs class method

class MyClass:
    variable = 1

    def func():
        print("This is a message inside the class.")

c = MyClass()
print(c.variable)
print(MyClass.variable) # 서로 다르다

c1 = MyClass()
c2 = MyClass()
MyClass.variable = 3

c1.variable = 1
c2.variable = 2
print(f"{c1.variable} {c2.variable} {MyClass.variable}")

MyClass.func()

# method vs static method vs class method

class Counter:
    count = 0

    @classmethod
    def increase(cls):
        cls.count += 1
        print(cls.count)

Counter.increase()
Counter.increase()

class Utility:
    @staticmethod
    def sum(x,y):
        return x + y


Utility. sum(1,2)

# module
import math

# maht.py

print(math.sqrt(10))

from math import sqrt

print(sqrt(10))

import random

print(random.randint(1,100))

champions = ["Aatrox", "Ahri", "Akali"]

print(random.choice(champions))
random.shuffle(champions)

import re
import statistics


# 1. 제2의 언어 - 빠른 코딩