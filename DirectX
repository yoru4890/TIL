DirectX
    종합 멀티미디어 라이브러리
    Direct : 하드웨어에 직접, 성능을 100% 발휘

    DirectX 7 : 2D & 3D
    DirectX 9 : 2002 ~ 2020년대까지 사용

    DirectX 11
    DirectX 12

    -----------------------------------------------

    DXGI
    Direct2D
    Direct3D
    XInput
    DirectMusic
    DirectAudio
    DirectWrite
    DirectCompute

    기본 DirectX SDK는 C언어입니다.
    COM 개념도 C언어입니다.

OpenGL

    Vulcan

    Metal

SDK : Software Development Kit

    API : Application Programming Interface

Factory 공산품을 생산하는 공장

int main()
{
    Character* p;

    switch(job)
    {
        case WARRIOR:
            p = new Warrior(단검);
            break;
        case WIZARD:
            p = new Wizard(지팡이, 파이어볼);
            break;

        case MONK:
            p = new Monk();
            break;
    }
}

// Factory Pattern
Factory *f;

f->CreateWarrior();
f->CreateWizard();
f->CreateMonk();

f->Create(MONK);
f->Create(WIZARD, 지팡이, 파이어볼);


int** pp;

Swap(int* p1, int* p2){}

int x{2};
int y{3};
Swap(&x,&y);

Create(int* p)
{
    p = new int[3];
}

int* array;
Create(array);

위에는 Call by value이다.

Create(int** p)
{
    p = new int[3];
}

int* array;
Create(&array);

int x, int y;
Swap(&x,&y);

void Swap(int*, int*)

int* x, int* y;
Swap(&x,&y);

void Swap(int**, int**);

OOP

class Direct2DGame
{
    윈도우 만들어주고
    윈도우 메시지 처리
    DirectX 처리
}

Library
    선언(.h)과 정의(.cpp - .lib)
    zip Library

API
    Application Programming Interface
    앱을 만들 때 사용하는 모든 기능
    앱 <=> 운영체제

SDK
    Software Development Kit
    API를 포함한 기타 여러 유틸리티의 묶음

Framework
    위에서 설명한 모든 도구들의 모음
    & 규칙


COM 인터페이스 포인터
-> 스마트포인터 windows 7

ComPtr : std::shared_ptr

    .GetAddressOf()
    .Get()


winmain()
{
    myFramework.Init();
    myFramework.run();
    myFramework.Release();
}

1. 윈도우 클래스
    RegisterClass();
2. 윈도우 생성
    CreateWindow();
3. 메시지 루프
    while(true)
    {
    }

4. 윈도우프로시져
    WndProc() -> RegisterClass 등록



class Framework
{
    init()
    {
        wc.wndproc = MsgProc;

        CreateWindow(); // pointer 추가 (this)
    }

    static MsgProc(HWND hwnd)
    {
        // hwnd -> pointer 꺼내기

        case WM_LBUTTONDOWN:
        {
            instance->OnClick();
        }
    }
}

Device Lost
(Full Screen -> Alt Tab)
    디바이스를 다시 생성
    Device Dependent Resource도 다시 만들어야 합니다.


Bitmap Graphics


Windows Imaging Component ( WIC )
    BMP
    GIF
    ICO
    JPG
    PNG
    TIF
    DDS
    Windows Media Photo

    1. 디코더 생성
    2. 프레임 획득
    3. Converter로 데이터를 변환 ( 픽셀포멧 BGRA )
    4. 위 데이터로 IBITMAP 생성

메타(meta)

    상위 - 메타버스
    트렌드 - 요즘 메타에는 원딜이 짱이지

    단어 의미 meta : about
    metadata


MyFolder
    1.txt
    2.doc
    3.PNG
    ,.
    .
    .
    .

설명.txt
    MyFolder에는 수업자료, 그림 등이 있음
    1.txt : 1010 자료

- 흑백 ( 1 )
- CGA ( 16 )
  EGA ( 256 )

- VGA ( True Color )
      16bit Color
      32bit Color


팔레트
    0 - 검은색
    1 - 흰색
    2 - 빨간
    ...
    255 - 핑크

BGRA 255 0 0 255
PAL 0 1 2 3 

디더링


threshold


Sprite

    - 공통 기능 ( 부모 )
        ID2D1Bitmap (그림파일 WIC)
        x
        y
        alpha

    WIC, Bitmap 생성


Actor

    IBitmap
    x
    y
    color.a


    object
    캐릭터
        본체
        투구
        칼

Character

Sprite


WIC
    image loading
    ->IBitmap


범위 지정 연산자
Scope Resolution Operator


int Red = 0;

namespace MyColor
{
    int Red = 0;
}

MyColor::Red = 0;

::Red = 1;

using namespace MyColor;
::Red = 1;
MyColor::Red = 1;



Design Pattern
    - Factory Pattern
    - Singleton Pattern


Singleton
    오직 하나의 인스턴스만 존재하는 객체
        - 생성자가 여러번 호출되어도 객체는 하나


class Singleton
{
public:
    static Singleton& Instance()
    {
        static Singleton instance;

        return instance;
    }
private:
    Singleton();
    Singleton(const Singleton&);
    void operator = (const Singleton&);

public:
    void DoSomething();
};

Singleton::Instance().DoSomething();
Singleton::Instance().DoSomething();


map
    1.png가 존재하는냐?
    없으면 -> 1.png 로딩
    있으면 -> 기존의 포인터 반환


벌레를 게임답게 만들기