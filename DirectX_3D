Direct2D
- 해상도, 모니터 스펙
- 연습용

Direct3D
- 제가 출시한 게임
- 장치 (그래픽카드, 모니터 특성 및 환경)


    Roadmap
    1. Device 생성 ( DeviceContext 포함 )
    2. SwapChain 생성
    3. 렌더타겟 (SwapChain의 후면버퍼를 지정)
    4. Depth-Stencil Buffer 생성
    5. 뷰포트 지정
    6. 렌더링 (그리기)


DX Resource & View


창모드 <-> 전체화면
    - 해상도 변경
    - 윈도우 배경 제거
    - 모드 스위치


해상도 변경
    (X Device & Device Context - 변경없음)


    - SwapChain
    - RenderTarget & RenderTargetView
    - Depth Stencil Buffer
    - Viewport


창 크기 변경 관련 Window Message
    WM_ENTERSIZEMOVE
    WM_SIZE
        사이징
        MINIMIZE
        MAXIMIZE
        RESTORE
    WM_EXITSIZEMOVE

    +

    WM_GETMINMAXINFO

    +

    땡 경고음
    WM_MENUCHAR


Shader
    shade + er( programmable )

    HLSL ( High-Level Shading Language )

        Semantic Program



Device
    CreateBuffer
    CreateVertexShader
    CreatePixelShader
    CreateInpuLayout
    CreateRenderTargetView
    CreateTexture2D
    CreateDepthStencilView

DeviceContext
    IASetInpuLayout
    IASetVertexBuffers
    IASetPrimitiveTopology

    VSSetShader
    RSSetViewpoints
    PSSetShader
    
    OMSetRenderTargets
    OMSetRenderTargets

    Draw
    Flush
    
    ClearRenderTargetView
    ClearDepthStencilView

    /////////////////////////////
    
    Map
    UnMap


Animation
    Frame Per Second
    시간
        - 고정 프레임레이트 ( 콘솔 오락실 )
        - 가변 프레임레이트 ( PC )

        - Delta : 이전에 작업한 시간과 현재 작업할 시간의 차이

게임 기능
    계산(Update) - cpu
    그리기(Render) - gpu

    - 동일한 게임 경험
    - 물리 ( 초당 30번 호출 )
    - 플랫폼 이식

    while()
    {
        Update();
        Render();
    }


    아이폰, 안드로이드
    C++
    ios - metal 그래픽 라이브러리
    android - vulcan 그래픽 라이브러리
    pc - directX

int main(delta)
{
    static delta = 현재시간();

    delta = 현재시간 - delta; 

    if ( 오른쪽 )
    {
        charcter.x += 1;
    }
}

DirectInput
    - 아주 정밀한 데이터 수집
    - 액션매핑 (옵션 -> 키설정)

    Action Mapping
    점프 : 레이싱휠 X축 + 

    단종

XInput
    - XBox 컨트롤러 완벽 호환 (유선/무선, 진동)
    - 헤드셋


개념적인(무식한) 방법
    키보드 - 키 상태(마우스버튼 포함)
    마우스 - 커서 위치

mInput.GetKeyUp("Left");


DirectXMath
    SIMD
    __m128 (레지스터 타입)


Calling Convention(호출규칙)
    함수 매개변수 전달

일반 변수
__m128 vector;


struct vector
{
    float x;
    float y;
    float z;
    float w;
};

vector v;
vector* p = new vector;


Matrix Order
